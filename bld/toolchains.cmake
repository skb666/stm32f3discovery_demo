set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ARM)

# 更详细的编译信息
# set(CMAKE_VERBOSE_MAKEFILE on)

# 选择编译版本（可以通过 vscode 指定）
set(CMAKE_BUILD_TYPE Release)
# set(CMAKE_BUILD_TYPE Debug)

set(TOOLCHAINS_PATH "")
set(TOOLCHAINS_PREFIX "arm-none-eabi-")

# 交叉编译器（可以通过 vscode 指定）
# set(CMAKE_C_COMPILER_WORKS 1)
# set(CMAKE_CXX_COMPILER_WORKS 1)
set(CMAKE_C_COMPILER "${TOOLCHAINS_PATH}${TOOLCHAINS_PREFIX}gcc")
set(CMAKE_CXX_COMPILER "${TOOLCHAINS_PATH}${TOOLCHAINS_PREFIX}g++")

# 生成目标的存放目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build)
# 默认存放静态库的文件夹位置
# set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build/archive)
# 默认存放动态库的文件夹位置
# set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/build/library)

set(CPU "-mcpu=cortex-m4")
set(FPU "-mfpu=fpv4-sp-d16")
set(FLOAT-ABI "-mfloat-abi=hard")
set(MCU "${CPU} -mthumb ${FPU} ${FLOAT-ABI}")

set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_FLAGS "${MCU}")
set(CMAKE_C_FLAGS_DEBUG "-g -gdwarf-2 -D DEBUG")
set(CMAKE_C_FLAGS_RELEASE "")

# 如果CMAKE_CXX_STANDARD_REQUIRED设置为ON则必须使用CMAKE_CXX_STANDARD指定的版本
# 如果CMAKE_CXX_STANDARD_REQUIRED设置为OFF则CMAKE_CXX_STANDARD指定版本的为首选版本如果没有会使用上一版本
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${MCU}")
set(CMAKE_CXX_FLAGS_DEBUG "-g -gdwarf-2 -D DEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "")

set(LDSCRIPT "${PROJECT_SOURCE_DIR}/STM32F303VCTx_FLASH.ld")
set(ASM_SOURCES "${PROJECT_SOURCE_DIR}/startup_stm32f303xc.s")
set(MAP_FILE "${PROJECT_SOURCE_DIR}/build/${PROJECT_NAME}.map")

set(CMAKE_EXE_LINKER_FLAGS "--specs=nosys.specs")

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
